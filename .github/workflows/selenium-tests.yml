name: Automated Testing with Unit and Selenium Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm install
      
    - name: Create Build Artifact
      run: |
        tar -czf build-artifact.tar.gz package.json package-lock.json src/ tests/
        
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: build-artifact.tar.gz

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        
    - name: Extract Build Artifact
      run: tar -xzf build-artifact.tar.gz
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm install
      
    - name: Run Unit Tests
      run: |
        echo "Running unit tests..."
        npm test
        echo "Unit tests completed!"
      
    - name: Start Selenium Server
      run: |
        echo "Starting Selenium server with host networking..."
        docker run -d --name selenium-server \
          --network host \
          --shm-size=2g \
          selenium/standalone-chrome:latest
        
        echo "Waiting for Selenium server to be ready..."
        for i in {1..30}; do
          if curl -f -s http://localhost:4444/wd/hub/status >/dev/null 2>&1; then
            echo "Selenium server is ready after $i seconds!"
            break
          fi
          echo "Waiting for Selenium... (attempt $i/30)"
          sleep 1
        done
        
        # Verify Selenium is ready
        curl -f http://localhost:4444/wd/hub/status
        echo "Selenium server confirmed ready!"
      
    - name: Start Application in Background
      run: |
        echo "Starting Node.js application..."
        npm start > server.log 2>&1 &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        echo $SERVER_PID > server.pid
        
        echo "Waiting for application to be ready..."
        for i in {1..60}; do
          if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
            echo "Application is ready after $i seconds!"
            break
          fi
          
          # Check if server process is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server process has died!"
            echo "Server logs:"
            cat server.log
            exit 1
          fi
          
          echo "Waiting... (attempt $i/60)"
          sleep 1
        done
        
        # Final check
        if ! curl -f -s http://localhost:3000 >/dev/null 2>&1; then
          echo "Application failed to start properly after 60 seconds"
          echo "Server logs:"
          cat server.log
          exit 1
        fi
        
        echo "Server is ready and responding!"
        
    - name: Test Both Services
      run: |
        echo "=== Testing Selenium Server ==="
        curl -f http://localhost:4444/wd/hub/status
        
        echo "=== Testing Node.js Server ==="
        curl -v http://localhost:3000
        
        echo "=== Network Status ==="
        netstat -tulpn | grep -E ":(3000|4444)" || echo "Services not found in netstat"
        
    - name: Run Selenium Integration Tests
      run: |
        echo "Running Selenium integration tests..."
        node tests/SeleniumTest.mjs github
        echo "Selenium tests completed!"
        
    - name: Stop Services
      if: always()
      run: |
        echo "Stopping application..."
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          if kill -0 $SERVER_PID 2>/dev/null; then
            kill $SERVER_PID
            echo "Stopped server with PID $SERVER_PID"
            sleep 2
          else
            echo "Server process was already stopped"
          fi
        fi
        
        # Force kill any remaining node processes
        pkill -f "node src/server.js" || true
        
        echo "Stopping Selenium server..."
        docker stop selenium-server || true
        docker rm selenium-server || true
        
        echo "All services stopped!"
        
    - name: Show Server Logs
      if: always()
      run: |
        echo "=== Server logs ==="
        cat server.log || echo "No server logs found"